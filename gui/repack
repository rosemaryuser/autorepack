#!/bin/sh

clear
cd /data/local/autorepack
git="/data/local/autorepack/bin/git"

while true; do
    if [ ! -f "$git" ]; then
        echo
        echo "! Git is not found at the expected location."
        echo "Please install git in Termux app by running:"
        echo "apt install git -y"
        echo "Have you installed git in Termux? (y/n)"
        read answer
        case "$answer" in
        [Yy]*) # any variation of "yes" or "YES"
            git="/data/data/com.termux/files/usr/bin/git"
            break # Exit the loop when a valid response is given
            ;;
        [Nn]*) # any variation of "no" or "NO"
            abort "Aborting. Git is required for this operation."
            ;;
        *) # for any other response
            echo
            echo "Please answer with y or n."
            ;;
        esac
    else
        # Git is found, so we can break the loop and continue with the script
        break
    fi
done

{ cp colors.properties $PREFIX/../home/.termux; \
chown -R $(stat -c%G $PREFIX) $PREFIX/../home/.termux; \
termux-reload-settings;} &> /dev/null

fetch_updates(){
    $git switch master &> /dev/null
    $git remote update &> /dev/null
    $git restore . &> /dev/null
    $git fetch &> /dev/null
    commits="$($git log --pretty=format:"%s~" --date=relative master..origin/master)"
    cd /data/adb/modules/autorepacker/system/bin/
    $git fetch &> /dev/null
    commits+="$($git log --pretty=format:%s~ --date=relative master..origin/master)"
}

check_updates(){
    echo
    echo -e "\e[3mChecking for updates...\e[0m"
    fetch_updates
    echo
    if [ ! -z "$commits" ]; then
        echo -e "\e[1mUpdates:\e[0m"
        awk -F '~' '{for(i=1; i<=NF-1; i++){ print "\033[3m ◍ " toupper(substr($i,0,1))tolower(substr($i,2))"\033[0m"}}' <<< "$commits"
        echo
        echo -e "\e[1mType in 'repack -un' to receive the updates.\e[0m"
        echo
    else
        echo -e "\e[3mYou are currently up-to-date.\e[0m"
        echo
    fi
}

update(){
    clear
    echo
    fetch_updates
    [ -z "$commits" ] && echo -e "\e[3mYou are already up-to-date.\e[0m" && exit || unset commits
    echo -e "\e[3mUpdating...\e[0m"
    $git pull &> /dev/null
    cd /data/local/autorepack
    $git pull &> /dev/null
    fetch_updates
    chmod -R +x /data/adb/modules/autorepacker/system/bin/
    cp /data/adb/modules/autorepacker/system/bin/* /system/bin/ &> /dev/null
    [ -z "$commits" ] && echo -e "\e[3mSuccessfully updated.\e[0m" && echo || echo -e "\e[3mProblems occured during update. Here's the full output:\n\e[0m$($git pull)"
    echo
}

fetch_history(){
    commits=$($git log --reverse -n 10|sed 's/^[a-zA-Z].*$//; /^$/ d')
    if [ ! -z "$commits" ]; then
        echo -e "\e[1mPast Updates:\e[0m"
        while read line; do
            echo -e "\e[3m ◍ $(echo $line| awk '{print toupper(substr($0,0,1))tolower(substr($0,2))}')\e[0m"
        done <<< $commits
        echo
    else
        echo -e "\e[3mNo past history found.\e[0m"
        echo
    fi
}

case "$1" in
 "")
   $PREFIX/bin/bash repack.sh
 ;;
 "--update"|"-u")
   check_updates
 ;;
 "--update-now"|"-un")
   update
 ;;
 "--update-history"|"-uh")
   $git switch master &> /dev/null
   fetch_history
 ;;
 "--recovery-manager"|"-rm")
   unmute="$(sh recovery_manager.sh)"
 ;;
 *|"--help"|"-h")
    printf "\n\033[1;31m%s \033[1;33m%s \033[37m%s\033[1;32m\n\n" "Usage:" "repack" "[ --help, -h ] [ --update, -u ] [ --update-now, -un ], [ --update-history, -uh ], [ --recovery-manager, -rm ]"
    printf " %s|\033[37m%s\n \033[1;32m%s|\033[37m%s\n \033[1;32m%s|\033[37m%s\n|%s\n|%s\n \033[1;32m%s|\033[0m%s\n \033[1;32m%s|\033[37m%s\033[0m|\n |%s%s|\033[0m" \
          "-u  --update" "Lists new updates" "-un --update-now" "Installs the new updates" \
          "-uh --update-history" "Lists the last 10 updates" \
          "-rm --recovery-manager" "A tool to import, download" "and remove recoveries" | column -t -s "|" -W 2
 ;;
esac
